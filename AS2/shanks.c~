// Duy Nhan Cao
// File: shanks.c

#ifndef GMP
#define GMP

#include "gmp.h"
#include <stdio.h>
#include <stdlib.h>

typedef struct {
  mpz_t value;
  mpz_t exp;
} shanks_t;

struct Node {
  shanks_t data;
  Node* right;
  Node* left;
  
  Node(const shanks_t & value):
    data(value), right(nullptr), left(nullptr) {}
  Node():
    right(nullptr), left(nullptr) {}
};

void shanks(mpz_t rop, const mpz_t p, const mpz_t g, const mpz_t h) {
  mpz_t n, p2, exp, exp2;
  mpz_init(n);
  mpz_init(p2);
  mpz_init_ui(exp, 0);
  mpz_init(exp2);
  
  Node *root = new Node();
  shanks_t dat;

  mpz_sub_ui(p2, p, 1);
  mpz_sqrt(n, p2);
  mpz_add_ui(n, 1);

  
  dat = makeData(dat, g, exp, p);
  root.data = dat;
  mpz_add_ui(exp, exp, 1);
   
  while(mpz_cmp(exp, n)) {
    dat = makeData(dat, g, exp, p);
    addNode(root, new Node(dat));

    mpz_add_ui(exp, exp, 1);
  }
  
  mpz_set_ui(exp, 0);
  while(mpz_cmp(exp, n)) {
    mpz_mul(exp2, exp, n);
    
    dat = makeData(dat, g, exp2, p);
    
    mpz_mul(dat.value, dat.value, h);
    mpz_tdiv_r(dat.value, dat.value, p);
    
    if(searchTree(root, dat, exp)) {
      mpz_add(rop, exp, exp2);
      break;
    }
    mpz_add_ui(exp, exp, 1);
  }
}

void addNode(Node *root, Node *leave) {
}

shanks_t makeData(shanks_t dat, mpz_t g, mpz_t exp, mpz_t p) {
  mpz_t c;
  mpz_init(c);

  mpz_powm(c, g, exp, p);
  mpz_set(dat.value, c);
  mpz_set(dat.exp, exp);

  return dat;
}

int searchTree(Node *root, shanks_t data, mpz_t exp) {
  Node *tem;
  tem = root;

  while(1) {
    if(tem == nullptr)
      return 0;
    if(mpz_cmp(tem.data.value, data.value)>1) {
      tem = tem->right;
    } else
    if((mpz_cmp(tem.data.value, data.value)<1) {
      tem = tem->left;
    } else {
      mpz_set(exp, tem.data.exp);
      return 1;
    }
	    
  }
}


#endif
